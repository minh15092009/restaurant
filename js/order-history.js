document.addEventListener('DOMContentLoaded', () => {
  firebase.auth().onAuthStateChanged(async user => {
    if (!user) {
      window.location.href = "login.html";
      return;
    }

    const db = firebase.firestore();
    const orderList = document.getElementById("order-list");
    if (!orderList) {
      console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ 'order-list'.");
      return;
    }

    try {
      // L·∫•y ƒë∆°n h√†ng ƒë√£ thanh to√°n c·ªßa user, s·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
      const snapshot = await db.collection("orders")
        .where("user", "==", user.email)
        .where("paid", "==", true)
        .orderBy("paidDate", "desc")
        .get();

      if (snapshot.empty) {
        orderList.innerHTML = "<p>B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o ƒë√£ thanh to√°n.</p>";
        return;
      }

      // Gom nh√≥m ƒë∆°n theo foodId + th·ªùi gian (t√°ch theo t·ª´ng gi·ªù)
      const groups = {};
      snapshot.docs.forEach(doc => {
        const o = doc.data();
        const paidTime = o.paidDate?.toDate?.();
        if (!paidTime) return;

        const hourKey = `${paidTime.getFullYear()}-${paidTime.getMonth() + 1}-${paidTime.getDate()} ${paidTime.getHours()}:00`;
        const groupKey = `${o.foodId}_${hourKey}`;

        if (!groups[groupKey]) {
          groups[groupKey] = {
            foodId: o.foodId,
            ids: [],
            quantity: 0,
            paidDate: paidTime,
          };
        }

        groups[groupKey].ids.push(doc.id);
        groups[groupKey].quantity += (o.quantity || 1);
      });

      const htmlArr = await Promise.all(
        Object.entries(groups).map(async ([groupKey, grp]) => {
          let food = null;
          try {
            const foodDoc = await db.collection("foods").doc(grp.foodId).get();
            if (foodDoc.exists) food = foodDoc.data();
          } catch (err) {
            console.warn("Kh√¥ng th·ªÉ t·∫£i m√≥n ƒÉn id=", grp.foodId, err);
          }

          const timeStr = grp.paidDate
            ? new Date(grp.paidDate).toLocaleString("vi-VN")
            : "Kh√¥ng x√°c ƒë·ªãnh";

          if (!food) {
            return `
              <div class="order-card" id="order-group-${groupKey}">
                <p>‚ö†Ô∏è M√≥n ƒë√£ b·ªã x√≥a kh·ªèi h·ªá th·ªëng</p>
              </div>
            `;
          }

          const totalPrice = grp.quantity * (food.price || 0);

          return `
            <div class="order-card d-flex border p-3 mb-3" id="order-group-${groupKey}">
              <div class="order-card-left" style="margin-right: 15px;">
                <img src="${food.image}" alt="${food.name}" style="width:80px; height:80px; object-fit:cover;" />
              </div>
              <div class="order-card-right">
                <h3>${food.name}</h3>
                <p>S·ªë l∆∞·ª£ng: <strong>${grp.quantity}</strong></p>
                <p>Gi√° m·ªói m√≥n: <strong>${food.price.toLocaleString("vi-VN")}‚Ç´</strong></p>
                <p>T·ªïng ti·ªÅn: <strong>${totalPrice.toLocaleString("vi-VN")}‚Ç´</strong></p>
                <p><small>üïí Thanh to√°n l√∫c: ${timeStr}</small></p>
              </div>
            </div>
          `;
        })
      );

      orderList.innerHTML = htmlArr.join("");

    } catch (error) {
      console.error("L·ªói t·∫£i l·ªãch s·ª≠ ƒë∆°n h√†ng:", error);
      orderList.innerHTML = "<p>‚ö†Ô∏è C√≥ l·ªói khi t·∫£i l·ªãch s·ª≠ ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.</p>";

      if (error.message.includes("requires an index")) {
        console.warn("‚ö†Ô∏è Firestore y√™u c·∫ßu composite index, h√£y t·∫°o theo link trong Console.");
      }
    }
  });
});

