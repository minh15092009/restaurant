document.addEventListener('DOMContentLoaded', () => {
  firebase.auth().onAuthStateChanged(async user => {
    if (!user) {
      window.location.href = "login.html";
      return;
    }

    const db = firebase.firestore();
    const orderList = document.getElementById("order-list");
    if (!orderList) {
      console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ 'order-list'.");
      return;
    }

    try {
      const snapshot = await db.collection("orders")
        .where("user", "==", user.email)
        .where("paid", "==", false)
        .orderBy("time", "desc")
        .get();

      if (snapshot.empty) {
        orderList.innerHTML = "<p>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.</p>";
        return;
      }

      const groups = {};
      snapshot.docs.forEach(doc => {
        const o = doc.data();
        if (!groups[o.foodId]) {
          groups[o.foodId] = {
            ids: [],
            quantity: 0,
            paid: true,
            firstTime: o.time
          };
        }
        groups[o.foodId].ids.push(doc.id);
        groups[o.foodId].quantity += (o.quantity || 1);
        if (o.paid === false) {
          groups[o.foodId].paid = false;
        }
      });

      const htmlArr = await Promise.all(
        Object.entries(groups).map(async ([foodId, grp]) => {
          let food = null;
          try {
            const foodDoc = await db.collection("foods").doc(foodId).get();
            if (foodDoc.exists) food = foodDoc.data();
          } catch (err) {
            console.warn("Kh√¥ng th·ªÉ t·∫£i m√≥n ƒÉn id=", foodId, err);
          }

          const statusText = grp.paid ? "‚úÖ ƒê√£ thanh to√°n" : "‚ùå Ch∆∞a thanh to√°n";
          const timeStr = grp.firstTime?.toDate
            ? new Date(grp.firstTime.toDate()).toLocaleString("vi-VN")
            : "Kh√¥ng x√°c ƒë·ªãnh";

          if (!food) {
            return `
              <div class="order-card" id="order-group-${foodId}">
                <p>‚ö†Ô∏è M√≥n ƒë√£ b·ªã x√≥a kh·ªèi h·ªá th·ªëng</p>
                <button onclick="deleteOrderGroup('${foodId}')">üóëÔ∏è X√≥a ƒë∆°n</button>
              </div>
            `;
          }

          const totalPrice = grp.quantity * (food.price || 0);

          return `
            <div class="order-card" id="order-group-${foodId}">
              <div class="order-card-left">
                <img src="${food.image}" alt="${food.name}" />
              </div>
              <div class="order-card-right">
                <h3>${food.name}</h3>
                <p>S·ªë l∆∞·ª£ng: <strong>${grp.quantity}</strong></p>
                <p>Gi√° m·ªói m√≥n: <strong>${food.price.toLocaleString("vi-VN")}‚Ç´</strong></p>
                <p>T·ªïng ti·ªÅn: <strong>${totalPrice.toLocaleString("vi-VN")}‚Ç´</strong></p>
                <p>Tr·∫°ng th√°i: <strong>${statusText}</strong></p>
                <p><small>üïí ${timeStr}</small></p>
                <button onclick="deleteOrderGroup('${foodId}')">üóëÔ∏è X√≥a ƒë∆°n</button>
              </div>
            </div>
          `;
        })
      );

      orderList.innerHTML = htmlArr.join("");

    } catch (error) {
      console.error("L·ªói t·∫£i ƒë∆°n h√†ng:", error);
      orderList.innerHTML = "<p>‚ö†Ô∏è C√≥ l·ªói khi t·∫£i ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.</p>";

      if (error.message.includes("requires an index")) {
        console.warn("‚ö†Ô∏è Firestore y√™u c·∫ßu composite index, h√£y t·∫°o theo link trong Console.");
      }
    }
  });
});

async function deleteOrderGroup(foodId) {
  if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa m√≥n n√†y kh√¥ng?")) return;
  const user = firebase.auth().currentUser;
  if (!user) {
    window.location.href = "login.html";
    return;
  }

  const db = firebase.firestore();
  try {
    const snap = await db.collection("orders")
      .where("user", "==", user.email)
      .where("foodId", "==", foodId)
      .get();

    const batch = db.batch();
    snap.docs.forEach(doc => batch.delete(doc.ref));
    await batch.commit();

    const el = document.getElementById(`order-group-${foodId}`);
    if (el) el.remove();
  } catch (err) {
    console.error("X√≥a order l·ªói:", err);
    alert("Kh√¥ng th·ªÉ x√≥a ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
  }
}

async function payment() {
  const user = firebase.auth().currentUser;
  if (!user) {
    window.location.href = "login.html";
    return;
  }

  const db = firebase.firestore();
  const orderList = document.getElementById("order-list");
  if (!orderList) {
    alert("Kh√¥ng th·ªÉ t√¨m th·∫•y danh s√°ch ƒë∆°n h√†ng.");
    return;
  }

  try {
    const snapshot = await db.collection("orders")
      .where("user", "==", user.email)
      .where("paid", "==", false)
      .orderBy("time", "desc")
      .get();

    if (snapshot.empty) {
      orderList.innerHTML = "<p>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.</p>";
      return;
    }

    const updatePromises = snapshot.docs.map(doc => {
      return db.collection("orders").doc(doc.id).update({
        paid: true,
        paidDate: firebase.firestore.FieldValue.serverTimestamp()
      });
    });

    await Promise.all(updatePromises);

    alert("Thanh to√°n th√†nh c√¥ng!");
    window.location.reload();
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng: ", error);
    alert("C√≥ l·ªói x·∫£y ra khi thanh to√°n, vui l√≤ng th·ª≠ l·∫°i.");
  }
}
